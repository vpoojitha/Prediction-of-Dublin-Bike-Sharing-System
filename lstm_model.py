# -*- coding: utf-8 -*-
"""LSTM_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tzzaZZshEY1JZrNTAOiNhXzJo0E-7Z3U

**LONG SHORT TERM MEMORY MODEL**
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing Libraries
from numpy import concatenate
from matplotlib import pyplot
from pandas import read_csv
from pandas import DataFrame
from pandas import concat
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from math import sqrt
import numpy as np
import pandas as pd
import matplotlib.pylab as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize']=10,6
import datetime as dt
import os
import seaborn as sns

"""**Preprocessing of Data**"""

###Bike Dataset###

df = pd.DataFrame()

data_path = 'C:/Users/Poojitha/Desktop/data.tar/data/data/Bikes/'
for f in os.listdir(data_path)[:]:
    if 'bikes' in f and f.split(".")[-1] == 'csv':
        tmp = pd.read_csv(data_path + f,index_col=0)
        date = f.split("_")[1].split(".")[0]
        tmp.index = (pd.to_datetime(pd.Series(tmp.index).apply(lambda x: " ".join([date,x])),
                                 yearfirst=True))
        df = pd.concat([df,tmp],axis=0)
frame=df
#Renaming the dateTime column
frame.rename(columns={'index: 0': 'DateTime'}, inplace=True)
frame=frame.reset_index()
frame.rename(columns={'index': 'DateTime'}, inplace=True)
#converting time column to date time to extract date and time
frame['DateTime']=pd.to_datetime(frame['DateTime'])
frame.head()
df=frame
#assigning all columns as stations with its availability
df1 = pd.melt(frame=df,id_vars=df.filter(regex='DateTime').columns,value_vars=df.loc[:,~df.columns.str.startswith('Date')].columns, var_name="Stations",value_name="availability")
#df1 = pd.melt(frame=df,value_vars=value_vars, var_name="Stations",value_name="availability")
df1['Date']=df1['DateTime'].dt.date
df1['hour']=df1['DateTime'].dt.hour
df1.to_csv('appendedData_final.csv')
df1.head()
df.isnull().values.any()
df.fillna(0, inplace=True)
df_mean=(round(df1.groupby(['Date','hour','Stations']).mean()))
df_mean=df_mean.reset_index()
df_mean.head()

####Weather dataset###

df_weather = pd.DataFrame()

data_path = 'C:/Users/Poojitha/Desktop/data.tar/data/data/weather/'
for f in os.listdir(data_path)[:]:
    if 'weather' in f and f.split(".")[-1] == 'csv':
        tmp = pd.read_csv(data_path + f,index_col=0)
        date = f.split("_")[1].split(".")[0]
        tmp.index = (pd.to_datetime(pd.Series(tmp.index).apply(lambda x: " ".join([date,x])),
                                 yearfirst=True))
        df_weather = pd.concat([df_weather,tmp],axis=0)
df_weather.head()

vals_to_replace = { 'Partly Cloudy' : 0, 'Partly Cloudy' : 1, 'Mostly Cloudy' : 2,'Light Rain':3, 'Mostly Cloudy':4,
                   'Light Rain' : 5,'Light Drizzle':6, 'Cloudy' :7, 'Fair':8, 
                   'Light Rain Shower':9,'Mist':10, 'Rain':11, 'Light Drizzle':12,
                    'Fair':13, 'Light Snow':14, 'Light Snow Grains':15,
                     'Light Rain Shower':16,'Mist':17, 'Showers in the Vicinity':18,
                     'Rain Shower':19, 'Cloudy': 20,'Rain':21, 'Drizzle': 22,'Drizzle':23,
                     'Shallow Fog':24,'Patches of Fog':25, 'Heavy Rain':26, 'Rain Shower':27, 'Fog':28,
                     'Hail':29, 'T-Storm':30, 'Thunder':31 }
df_weather['Weather'] = df_weather['Weather'].map(vals_to_replace)

df_weather=df_weather.reset_index()
df_weather['DateTime']=pd.to_datetime(df_weather['Time'])
df_weather['Date']=df3['Time'].dt.date
df_weather['hour']=df_weather['Time'].dt.hour
df_weather=df_weather.drop('DateTime',1)
df_weather=df_weather.drop('Time',1)
df_weather.fillna(0, inplace=True)
df_weather = round(df_weather.groupby(['Date','hour']).agg({'Temperature':'mean','Weather': lambda x: x.value_counts().index[0],'Feels_Like':'mean'})).astype(int)
df_weather=df_weather.reset_index()
#merging both the bike and weather dataset based on time.
mergeddf = pd.merge(df_mean, df_weather, on=['Date','hour'])
final_dataset=mergeddf
final_dataset['Datetime'] = pd.to_datetime(final_dataset['Date'].astype(str)+' '+final_dataset['hour'].astype(str)+':00')
final_dataset.set_index("Datetime",inplace=True)
#Storing the data in a csv file
final_dataset.to_csv('Final_bike_dataset.csv')

"""**LSTM model**"""

# convert series to supervised learning
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	df = DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(df.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(df.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg

#####Data preparation#######
#read csv file and store data
df=read_csv('Final_bike_dataset.csv', header=0, index_col=0)
copy of the original dataframe
dataset=df
#Indexing the date and time
dataset.set_index("Datetime",inplace=True)
#Encoding of the stations
encoder=LabelEncoder()
dataset['Stations'] = encoder.fit_transform(dataset['Stations'])
dataset['availability']=round(dataset['availability'].astype(int))
#dataset.head()
values = dataset.values
#print(values)
# ensuring all data to be float
values = values.astype('float32')
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
reframed = series_to_supervised(scaled, 1, 1)
reframed.drop(reframed.columns[[5,6,7,8,9,10]], axis=1, inplace=True)
# split into train and test sets (70% train, 30% test)
values = reframed.values
n_train_hours = 5000 * 24
train = values[:n_train_hours, :]
test = values[n_train_hours:, :]
# split into input and outputs
train_X, train_y = train[:, :-1], train[:, -1]
test_X, test_y = test[:, :-1], test[:, -1]
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

# Designing LSTM network
model = Sequential()
model.add(LSTM(50, input_shape=(train_X.shape[1], train_X.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')
# fitting network
print(test_X.shape,test_y.shape)
history = model.fit(train_X, train_y, epochs=50, batch_size=72, validation_data=(test_X, test_y), verbose=2, shuffle=False)
# plot history
pyplot.plot(history.history['loss'], label='train')
pyplot.plot(history.history['val_loss'], label='test')
pyplot.legend()
pyplot.show()
 
# making prediction
yhat = model.predict(test_X)
test_X = test_X.reshape((test_X.shape[0], test_X.shape[2]))
# invert scaling for forecast
#print(yhat.shape, test_X[:, 1:].shape)
inv_yhat = concatenate((yhat, test_X[:, 1:]), axis=1)
#print(inv_yhat.shape)
inv_yhat = scaler.inverse_transform(inv_yhat)
#print(inv_yhat.shape)
inv_yhat = inv_yhat[:,0]
# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = concatenate((test_y, test_X[:, 1:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:,0]
#print(inv_y,inv_yhat)
# calculating RMSE
rmse = sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)